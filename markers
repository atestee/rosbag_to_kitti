#!/usr/bin/env python2

# BOUNDING BOX VISUALIZATION NODE
# usage:
# 1) put node in directory: subt_ws/src/subt/subt_ros/src
# 2) put label file into directory subt_ws/src/subt/subt_ros/labels and name it label.txt
# 3) compile Catkin workspace: cd ~/subt_ws/ & catkin_make -DCMAKE_BUILD_TYPE=Release install
# 4) run Subt simulator: source ~/subt_ws/install/setup.bash & ign launch -v 4 competition.ign worldName:=tunnel_circuit_practice_01 circuit:=tunnel robotName1:=X1 robotConfig1:=X1_SENSOR_CONFIG_1
# 5) run node: rosrun subt_ros markers
# 6) run RVIZ: rosrun rviz rviz, and make sure the fixed frame is 'X1/laser/laser'


import rospy
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray
from geometry_msgs.msg import Point
import numpy as np


def get_bboxes(filename):
    f = open(filename, 'r')
    contents = f.read()
    bboxes = []
    for line in contents.split('/n'):
        bbox = line.split(' ')
        bboxes.append(bbox)
    return bboxes


def get_quarternion(yaw):
    # https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Euler_angles_to_quaternion_conversion
    yaw = float(yaw)
    roll = 0
    pitch = 0
    cy = np.cos(yaw * 0.5)
    sy = np.sin(yaw * 0.5)
    cp = np.cos(pitch * 0.5)
    sp = np.sin(pitch * 0.5)
    cr = np.cos(roll * 0.5)
    sr = np.sin(roll * 0.5)

    q_w = cr * cp * cy + sr * sp * sy
    q_x = sr * cp * cy - cr * sp * sy
    q_y = cr * sp * cy + sr * cp * sy
    q_z = cr * cp * sy - sr * sp * cy

    return [q_x, q_y, q_z, q_w]


if __name__ == '__main__':
    marker_pub = rospy.Publisher("/bounding_boxes", MarkerArray, queue_size=10)
    rospy.init_node("bboxes")
    marker_array = MarkerArray()
    bboxes = get_bboxes('/home/atestee/subt_ws/src/subt/subt_ros/labels/label.txt')
    for bbox in bboxes:
        marker = Marker()
        marker.header.frame_id = '/X1/laser/laser'
        marker.header.stamp = rospy.Time()
        marker.type = marker.CUBE
        x = float(bbox[11])
        y = float(bbox[12])
        z = float(bbox[13])
        marker.action = marker.ADD
        marker.pose.position.x = x
        marker.pose.position.y = y
        marker.pose.position.z = z
        q = get_quarternion(bbox[3])
        marker.pose.orientation.x = q[0]
        marker.pose.orientation.y = q[1]
        marker.pose.orientation.z = q[2]
        marker.pose.orientation.w = q[3]
        marker.scale.x = float(bbox[9])
        marker.scale.y = float(bbox[10])
        marker.scale.z = float(bbox[8])
        marker.color.r = 0.0
        marker.color.g = 1.0
        marker.color.b = 0.0
        marker.color.a = 0.5
        marker_array.markers.append(marker)
    while True:
        marker_pub.publish(marker_array)

